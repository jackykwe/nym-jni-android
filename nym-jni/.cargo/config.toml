# [target.x86_64-linux-android]
# # From: https://developer.android.com/ndk/guides/other_build_systems#overview
# linker = "/home/jacky/Android/Sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android31-clang"
# # From: /home/jacky/Android/Sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android31-clang -print-libgcc-file-name
# rustflags = ["-Clink-arg=/home/jacky/Android/Sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/libclang_rt.builtins-x86_64-android.a"]

[target.aarch64-linux-android]
# Need to specify linker (and archiver):
# - https://rust-lang.github.io/rustup/cross-compilation.html
# - https://doc.rust-lang.org/cargo/reference/config.html#target
# Illustrated here: https://mozilla.github.io/firefox-browser-architecture/experiments/2017-09-21-rust-on-android.html
#! [1] Without specifying, always fails with <linking with `cc` failed: exit status: 1> (self: NDK not used)
linker = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
#? Previous issue with manual libgcc.a has been patched by upgrading to Rust 1.68.1 (https://blog.rust-lang.org/2023/01/09/android-ndk-update-r25.html)
#? Archive links:
#? - https://github.com/rust-lang/rust/pull/85806#issuecomment-1096266946 (workaround origin)
#? - https://github.com/rust-lang/rust/pull/102332#issuecomment-1289987284 (summary of issue 1)
#? - https://github.com/rust-lang/rust/issues/103673 (summary of issue 2)

[target.armv7-linux-androideabi]
linker = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"

[env]
# must specify these due to ring: https://github.com/briansmith/ring/blob/main/BUILDING.md#cross-compiling
# Ring's documentation technically specifies that we need TARGET_CC, but from the following Ring build script error trace we can see that there exists target-specific environment variables (e.g. CC_aarch64_linux_android) that influence the actual `cc` that is run (determined experimentally):
#! [2] Without specifying CC_aarch64_linux_android, building ring fails with:
#      --- stdout
#      OPT_LEVEL = Some("0")
#      TARGET = Some("aarch64-linux-android")
#      HOST = Some("x86_64-unknown-linux-gnu")
#      cargo:rerun-if-env-changed=CC_aarch64-linux-android
#      CC_aarch64-linux-android = None
#      cargo:rerun-if-env-changed=CC_aarch64_linux_android
#      CC_aarch64_linux_android = None
#      cargo:rerun-if-env-changed=TARGET_CC
#      TARGET_CC = None
#      cargo:rerun-if-env-changed=CC
#      CC = None
#      cargo:rerun-if-env-changed=CFLAGS_aarch64-linux-android
#      CFLAGS_aarch64-linux-android = None
#      cargo:rerun-if-env-changed=CFLAGS_aarch64_linux_android
#      CFLAGS_aarch64_linux_android = None
#      cargo:rerun-if-env-changed=TARGET_CFLAGS
#      TARGET_CFLAGS = None
#      cargo:rerun-if-env-changed=CFLAGS
#      CFLAGS = None
#      cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS
#      CRATE_CC_NO_DEFAULTS = None
#      DEBUG = Some("true")
#
#      --- stderr
#      running "aarch64-linux-android-clang" "-O0" "-DANDROID" "-ffunction-sections" "-fdata-sections" "-fPIC" "-gdwarf-2" "-fno-omit-frame-pointer" "-I" "include" "-Wall" "-Wextra" "-pedantic" "-pedantic-errors" "-Wall" "-Wextra" "-Wcast-align" "-Wcast-qual" "-Wconversion" "-Wenum-compare" "-Wfloat-equal" "-Wformat=2" "-Winline" "-Winvalid-pch" "-Wmissing-field-initializers" "-Wmissing-include-dirs" "-Wredundant-decls" "-Wshadow" "-Wsign-compare" "-Wsign-conversion" "-Wundef" "-Wuninitialized" "-Wwrite-strings" "-fno-strict-aliasing" "-fvisibility=hidden" "-fstack-protector" "-g3" "-DNDEBUG" "-c" "-o/home/jacky/Documents/part-ii/dissertation/Retrace/retrace-nym-jni/target/aarch64-linux-android/debug/build/ring-a3a5f1707d8aa20a/out/aesv8-armx-linux64.o" "/home/jacky/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.16.20/pregenerated/aesv8-armx-linux64.S"
#      thread 'main' panicked at 'failed to execute ["aarch64-linux-android-clang" "-O0" "-DANDROID" "-ffunction-sections" "-fdata-sections" "-fPIC" "-gdwarf-2" "-fno-omit-frame-pointer" "-I" "include" "-Wall" "-Wextra" "-pedantic" "-pedantic-errors" "-Wall" "-Wextra" "-Wcast-align" "-Wcast-qual" "-Wconversion" "-Wenum-compare" "-Wfloat-equal" "-Wformat=2" "-Winline" "-Winvalid-pch" "-Wmissing-field-initializers" "-Wmissing-include-dirs" "-Wredundant-decls" "-Wshadow" "-Wsign-compare" "-Wsign-conversion" "-Wundef" "-Wuninitialized" "-Wwrite-strings" "-fno-strict-aliasing" "-fvisibility=hidden" "-fstack-protector" "-g3" "-DNDEBUG" "-c" "-o/home/jacky/Documents/part-ii/dissertation/Retrace/retrace-nym-jni/target/aarch64-linux-android/debug/build/ring-a3a5f1707d8aa20a/out/aesv8-armx-linux64.o" "/home/jacky/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.16.20/pregenerated/aesv8-armx-linux64.S"]: No such file or directory (os error 2)', /home/jacky/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.16.20/build.rs:653:9
#      note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
CC_aarch64_linux_android = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
#! [3] Without specifying AR_aarch64_linux_android, building ring fails with <error occurred: Failed to find tool. Is `aarch64-linux-android-ar` installed?>
# Ring also uses AR. So by similar reasoning as CC_aarch64_linux_android, AR_aarch64_linux_android must also be specified.
AR_aarch64_linux_android = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
#! [4] Without specifying RANLIB_aarch64_linux_android, building openssl (vendored (must be used for cross-compilation to compile a copy for the target architecture)) fails with:
#   --- stdout
#   ...
#   cargo:rerun-if-env-changed=RANLIB_aarch64-linux-android
#   RANLIB_aarch64-linux-android = None
#   cargo:rerun-if-env-changed=RANLIB_aarch64_linux_android
#   RANLIB_aarch64_linux_android = None
#   cargo:rerun-if-env-changed=TARGET_RANLIB
#   TARGET_RANLIB = None
#   cargo:rerun-if-env-changed=RANLIB
#   RANLIB = None
#   cargo:rerun-if-env-changed=RANLIBFLAGS_aarch64-linux-android
#   RANLIBFLAGS_aarch64-linux-android = None
#   cargo:rerun-if-env-changed=RANLIBFLAGS_aarch64_linux_android
#   RANLIBFLAGS_aarch64_linux_android = None
#   cargo:rerun-if-env-changed=TARGET_RANLIBFLAGS
#   TARGET_RANLIBFLAGS = None
#   cargo:rerun-if-env-changed=RANLIBFLAGS
#   RANLIBFLAGS = None
#   ...
RANLIB_aarch64_linux_android = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"

CC_armv7_linux_androideabi = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
#! [3] Without specifying AR_armv7_linux_androideabi, building ring fails with <error occurred: Failed to find tool. Is `arm-linux-androideabi-ar` installed?>
AR_armv7_linux_androideabi = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
RANLIB_armv7_linux_androideabi = "/home/jacky/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
